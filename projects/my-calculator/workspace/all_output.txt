Based on the requirements and assumptions, here are the core classes, functions, and methods that will be necessary for the calculator application:

1. Model:
   - Calculator: Responsible for performing calculations and storing the current state of the calculator.
     - add(num1, num2): Adds two numbers.
     - subtract(num1, num2): Subtracts num2 from num1.
     - multiply(num1, num2): Multiplies two numbers.
     - divide(num1, num2): Divides num1 by num2.
     - exponentiate(base, exponent): Raises the base to the power of the exponent.
     - sin(angle): Calculates the sine of an angle.
     - cos(angle): Calculates the cosine of an angle.
     - tan(angle): Calculates the tangent of an angle.
     - log(base, num): Calculates the logarithm of a number with a given base.
     - clear(): Resets the calculator state.
     - get_result(): Returns the current result of the calculator.

2. View:
   - CalculatorView: Responsible for displaying the calculator interface and handling user input/output.
     - show_menu(): Displays the calculator menu.
     - get_user_input(): Gets user input from the keyboard.
     - display_result(result): Displays the result of a calculation.
     - display_error(message): Displays an error message.

3. Controller:
   - CalculatorController: Responsible for handling user input, communicating with the Model and View, and controlling the flow of the application.
     - start(): Starts the calculator application.
     - handle_input(input): Handles user input and performs the corresponding action.
     - perform_calculation(operation, num1, num2): Calls the appropriate method in the Model to perform the calculation.
     - display_result(result): Calls the View to display the result.
     - display_error(message): Calls the View to display an error message.

Now, let's proceed with creating the necessary files and implementing the code.

1. calculator.py

```python
from dataclasses import dataclass


@dataclass
class Calculator:
    result: float = 0

    def add(self, num1: float, num2: float) -> float:
        self.result = num1 + num2
        return self.result

    def subtract(self, num1: float, num2: float) -> float:
        self.result = num1 - num2
        return self.result

    def multiply(self, num1: float, num2: float) -> float:
        self.result = num1 * num2
        return self.result

    def divide(self, num1: float, num2: float) -> float:
        if num2 != 0:
            self.result = num1 / num2
            return self.result
        else:
            raise ZeroDivisionError("Cannot divide by zero")

    def exponentiate(self, base: float, exponent: float) -> float:
        self.result = base ** exponent
        return self.result

    def sin(self, angle: float) -> float:
        import math
        self.result = math.sin(math.radians(angle))
        return self.result

    def cos(self, angle: float) -> float:
        import math
        self.result = math.cos(math.radians(angle))
        return self.result

    def tan(self, angle: float) -> float:
        import math
        self.result = math.tan(math.radians(angle))
        return self.result

    def log(self, base: float, num: float) -> float:
        import math
        self.result = math.log(num, base)
        return self.result

    def clear(self) -> None:
        self.result = 0

    def get_result(self) -> float:
        return self.result
```

2. view.py

```python
class CalculatorView:
    @staticmethod
    def show_menu() -> None:
        print("Calculator Menu:")
        print("1. Addition")
        print("2. Subtraction")
        print("3. Multiplication")
        print("4. Division")
        print("5. Exponentiation")
        print("6. Sine")
        print("7. Cosine")
        print("8. Tangent")
        print("9. Logarithm")
        print("0. Clear")
        print("q. Quit")

    @staticmethod
    def get_user_input() -> str:
        return input("Enter your choice: ")

    @staticmethod
    def display_result(result: float) -> None:
        print("Result:", result)

    @staticmethod
    def display_error(message: str) -> None:
        print("Error:", message)
```

3. controller.py

```python
from calculator import Calculator
from view import CalculatorView


class CalculatorController:
    def __init__(self):
        self.calculator = Calculator()

    def start(self) -> None:
        while True:
            CalculatorView.show_menu()
            user_input = CalculatorView.get_user_input()
            if user_input == 'q':
                break
            self.handle_input(user_input)

    def handle_input(self, input: str) -> None:
        try:
            if input == '0':
                self.calculator.clear()
            elif input == '1':
                self.perform_calculation("add")
            elif input == '2':
                self.perform_calculation("subtract")
            elif input == '3':
                self.perform_calculation("multiply")
            elif input == '4':
                self.perform_calculation("divide")
            elif input == '5':
                self.perform_calculation("exponentiate")
            elif input == '6':
                self.perform_calculation("sin")
            elif input == '7':
                self.perform_calculation("cos")
            elif input == '8':
                self.perform_calculation("tan")
            elif input == '9':
                self.perform_calculation("log")
            else:
                CalculatorView.display_error("Invalid input")
        except Exception as e:
            CalculatorView.display_error(str(e))

    def perform_calculation(self, operation: str) -> None:
        num1 = float(input("Enter the first number: "))
        num2 = float(input("Enter the second number: "))
        result = getattr(self.calculator, operation)(num1, num2)
        CalculatorView.display_result(result)


if __name__ == "__main__":
    calculator_controller = CalculatorController()
    calculator_controller.start()
```

4. test_calculator.py

```python
import pytest
from calculator import Calculator


@pytest.fixture
def calculator():
    return Calculator()


def test_addition(calculator):
    assert calculator.add(2, 3) == 5


def test_subtraction(calculator):
    assert calculator.subtract(5, 2) == 3


def test_multiplication(calculator):
    assert calculator.multiply(2, 3) == 6


def test_division(calculator):
    assert calculator.divide(6, 2) == 3


def test_division_by_zero(calculator):
    with pytest.raises(ZeroDivisionError):
        calculator.divide(6, 0)


def test_exponentiation(calculator):
    assert calculator.exponentiate(2, 3) == 8


def test_sin(calculator):
    import math
    assert calculator.sin(30) == math.sin(math.radians(30))


def test_cos(calculator):
    import math
    assert calculator.cos(60) == math.cos(math.radians(60))


def test_tan(calculator):
    import math
    assert calculator.tan(45) == math.tan(math.radians(45))


def test_log(calculator):
    import math
    assert calculator.log(10, 100) == math.log(100, 10)
```

Please note that the code provided is a basic implementation of the calculator application and may require additional error handling, input validation, and edge case handling depending on the specific requirements and use cases.

Next, we will create the necessary files for package management and dependencies.

5. requirements.txt

```
dataclasses
```

Now, all the necessary files and code have been provided to implement the calculator application with MVC architecture and pytest for testing.